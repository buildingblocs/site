---
import Layout from "../../layout.astro";
import { Button } from "@/components/ui/button";
import { ArrowLeftIcon, ArrowRightIcon, InfoCircledIcon } from "@radix-ui/react-icons";
import Faq from "@/components/eventpage/accordion";
import Timeline from "@/components/eventpage/timeline";
import { Image } from "astro:assets";
import { partnerMap } from "@/partners"

import { getCollection } from "astro:content";
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const eventEntries = await getCollection("events");
  return eventEntries.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;

const partners = entry.data.partners
  ? partnerMap[entry.data.partners as keyof typeof partnerMap]
  : undefined;
let title = entry.data.title;
let formattedTitle = title.replace(" ", "<br>");
---

<Layout title={entry.data.title} desc={entry.data.excerpt}>
  <div class="max-w-6xl flex mx-auto mb-10 gap-x-6 md:flex-row flex-col p-4 sm:p-10 gap-y-10">
    <div class="flex-1 gap-y-4 flex flex-col">
      <h1 class="text-5xl" set:html={formattedTitle}>{entry.data.title}</h1>
      <h2>Key Details</h2>
      <ul class="list-disc marker:text-slate-500 ml-4 list-inside">
        {entry.data.details.map((detail) => <li set:html={detail} />)}
      </ul>

      <div class="flex gap-x-3">
        {entry.data.luma && entry.data.status == 'open' &&
          <a
            href=`https://lu.ma/event/${entry.data.luma}?utm_source=bbcs-site`
            data-luma-action="checkout"
            data-luma-event-id={entry.data.luma}
            class="w-max"
          >
            <Button className="flex gap-x-2">
                Register for Event
                <ArrowRightIcon />
            </Button>
          </a>
        }
        {entry.data.signupLink && entry.data.status == "open" && (
          <a href={entry.data.signupLink} target="_blank" rel="noopener noreferrer">
            <Button className="flex gap-x-2">
              Register
              <ArrowRightIcon />
            </Button>
          </a>
        )}
        {entry.data.directions &&
          <a href={entry.data.directions} class="w-max">
            <Button className="flex gap-x-2">
                Directions
                <ArrowRightIcon />
            </Button>
          </a>
        }
      </div>

      <!-- march conference only: change in DSA timings
      <div class="bg-yellow-900 text-yellow-500 rounded-md p-3 flex flex-row items-center space-x-3">
        <InfoCircledIcon className="w-5 h-5 flex-none"></InfoCircledIcon>
        <p>Note: the timings for Data Structures & Algorithms and Streamlit has been swapped, please refer below for the updated timings.</p>
      </div> -->
      {entry.data.status !== 'closed' && <p set:html={entry.data.desc} /> }
      {entry.data.status == 'closed' && <p>Registration is closed! To modify your existing registration, please email us at hello@buildingblocs.sg</p>}

      <Faq client:load faq={entry.data.faq} />

      {partners && 
        <div class="bg-slate-900 rounded-xl px-3 pb-4 pt-2 mt-2 border border-slate-700 w-full">
          <p class="text-xs mb-3">
            Proudly supported by:
          </p>
          <div class="flex">
            {partners.map((partner) => (
              <div class="flex-1 flex justify-center items-center">
                <Image 
                  src={partner.src} 
                  alt={`${partner.title}'s logo`} 
                  class="h-10 object-contain max-w-full" 
                  loading="lazy" 
                />
              </div>
            ))}
          </div>
        </div>
      }        
    </div>
    <div class="flex-1 gap-y-4 flex flex-col">
      {entry.data.status !== 'closed' && entry.data.prospectus &&
        <div class="embla w-4/5 mx-auto relative">
          <p class="text-slate-300 font-medium">Official Prospectus</p>
          <div class="embla__viewport overflow-hidden rounded-xl">
            <div class="embla__container flex">
              {
                entry.data.prospectus?.map((slide) => (
                  <div class="embla__slide">
                    <img
                      src={slide.src}
                      alt='Prospectus Slides'
                      class="object-contain mx-auto"
                    />
                  </div>
                ))
              }
            </div>
          </div>
          <Button
            className="embla__prev absolute md:-left-12 -left-10 top-1/2 transform -translate-y-1/2 rounded-full px-0 h-8 w-8"
          >
            <ArrowLeftIcon className="w-5 h-5" />
            <span class="sr-only">Previous slide</span>
          </Button>
          <Button
            className="embla__next absolute md:-right-12 -right-10 top-1/2 transform -translate-y-1/2 rounded-full px-0 h-8 w-8"
          >
            <ArrowRightIcon className="w-5 h-5" />
            <span class="sr-only">Next slide</span>
          </Button>
        </div>
      }
      <Timeline timeline={entry.data.timeline} client:load />
    </div>
  </div>
  <script is:inline id="luma-checkout" src="https://embed.lu.ma/checkout-button.js" />
</Layout>
<script>
  import EmblaCarousel from "embla-carousel";
  import Autoplay from "embla-carousel-autoplay";

  const emblaNode = document.querySelector(".embla__viewport") as HTMLElement;

  // Initialize Embla Carousel
  const embla = EmblaCarousel(emblaNode, { loop: false }, [Autoplay()]);

  // Event listeners for previous and next buttons
  const prevButtonNode = document.querySelector(".embla__prev") as HTMLElement;
  const nextButtonNode = document.querySelector(".embla__next") as HTMLElement;

  prevButtonNode.addEventListener("click", () => embla.scrollPrev(), false);
  nextButtonNode.addEventListener("click", () => embla.scrollNext(), false);
</script>
<style>
  .embla__slide {
    flex: 0 0 100%;
    display: flex;
  }
</style>